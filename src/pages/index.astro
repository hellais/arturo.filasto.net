---

---

<html lang="en">
  <head>
    <title>Arturo Filastò</title>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <style>
      body {
        margin: 0;
        background-color: rgb(30, 15, 13);
      }
      canvas {
        width: 100%;
        height: 500px;
        display: block;
      }
    </style>
  </head>
  <body>
    <canvas id="trippyCanvas"></canvas>
    <script type="text/javascript">
      document.addEventListener("DOMContentLoaded", function () {
        const canvas = document.getElementById("trippyCanvas");
        const ctx = canvas.getContext("2d");
        canvas.width = window.innerWidth;
        //canvas.height = window.innerHeight;
        canvas.height = 500;
        let mouseX = window.innerWidth / 2;
        let mouseY = window.innerHeight / 2;

        let colors = [
          "rgb(229,13,14)", // bright red
          "rgb(125,1,10)", // muted red
        ];

        ("rgb(30,15,13)"); // black hsl(7, 40, 8)
        ("rgb(82, 22, 17)"); // maroon hsl(5, 66, 19)
        //"rgb(57, 255, 20)",
        //"rgb(229, 228, 226)",

        let colors2 = [
          "rgb(71, 74, 81)",
          "rgb(255, 165, 0)",
          "rgb(0, 128, 128)",
        ];

        let offsetX = 0;
        let offsetY = 0;
        let colorIdx = 0;

        let particles = [];
        const numberOfParticles = 420;

        class Particle {
          constructor() {
            this.x = Math.random() * canvas.width;
            this.y = Math.random() * canvas.height;
            this.size = Math.random() * 5 + 1;
            this.speedX = Math.random() - 0.5;
            this.speedY = Math.random() - 0.5;
            this.colorIdx = Math.round(Math.random() * colors.length);
          }

          update() {
            this.x += this.speedX;
            let dX = (this.x - mouseX) * 0.001;
            this.x -= dX;
            this.y += this.speedY;
            let dY = (this.x - mouseY) * 0.001;
            this.y -= dY;
            if (this.size > 0.3) this.size -= 0.1;
          }

          draw() {
            ctx.fillStyle = colors[this.colorIdx];
            ctx.beginPath();
            ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
            ctx.fill();
          }
        }

        function init() {
          for (let i = 0; i < numberOfParticles; i++) {
            particles.push(new Particle());
          }
        }

        function handleParticles() {
          for (let i = 0; i < particles.length; i++) {
            particles[i].update();
            particles[i].draw();

            for (let j = i; j < particles.length; j++) {
              const dx = particles[i].x - particles[j].x;
              const dy = particles[i].y - particles[j].y;
              const distance = Math.sqrt(dx * dx + dy * dy);
              if (distance < 100) {
                ctx.beginPath();
                ctx.strokeStyle = colors[particles[i].colorIdx];
                ctx.lineWidth = 0.2;
                ctx.moveTo(particles[i].x, particles[i].y);
                ctx.lineTo(particles[j].x, particles[j].y);
                ctx.stroke();
              }
            }

            if (particles[i].size <= 0.3) {
              particles.splice(i, 1);
              i--;
              particles.push(new Particle());
            }
          }
        }

        function animateGradient() {
          r0 = 100 * 2 + 100 * Math.sin(t * 0.002);
          r1 = 300 * 2 + 200 * Math.cos(t * 0.002);
          let gradient = ctx.createRadialGradient(
            mouseX,
            mouseY,
            r0,
            mouseX,
            mouseY,
            r1
          );
          gradient.addColorStop(0, `hsl(42, 97%, 88%)`);
          gradient.addColorStop(0.8, `hsl(5, 66%, 19%)`);
          gradient.addColorStop(1, `hsl(7, 40%, 8%)`);
          ctx.fillStyle = gradient;
          ctx.fillRect(0, 0, canvas.width, canvas.height);
        }

        function animateText(time) {
          textScale = 2 + 1 * Math.sin(t * 0.002);
          ctx.font = `${textScale * 20}px monospace`;
          ctx.fillStyle = "rgb(30,15,13)";
          ctx.textAlign = "left";
          let lsPoints = [];
          for (let idx = 0; idx < animatedText.length; idx++) {
            textX =
              canvas.width / 2 +
              (canvas.width / 2 - 100) *
                Math.sin(lsa * (t + 80 * idx) * 0.0003 + lsd);
            textY =
              canvas.height / 2 +
              (canvas.height / 2 - 50) *
                Math.sin(lsb * (t + 80 * idx) * 0.0003);
            lsPoints.push([textX, textY]);
          }
          lsPoints.sort((a, b) => a[0] - b[0]);
          lsPoints.forEach((p, idx) => {
            ctx.fillText(animatedText[idx], p[0], p[1]);
          });
        }

        function animate(time) {
          ctx.clearRect(0, 0, canvas.width, canvas.height);
          animateGradient();
          handleParticles();
          animateText(time);
          t += 2;
          requestAnimationFrame(animate);
        }

        let lsa = 5;
        let lsb = 6;
        let lsd = Math.PI / 2;

        let r0 = 100;
        let r1 = 500;
        let t = 0;
        let textScale = 1;
        const animatedText = "Arturo Filastò";
        init();
        animate();

        window.addEventListener("mousemove", function (e) {
          offsetY = canvas.height / (canvas.height - e.screenY);
          offsetX = canvas.height / (canvas.width - e.screenX);
          mouseX = e.screenX;
          mouseY = e.screenY;
        });
      });
    </script>
  </body>
</html>
